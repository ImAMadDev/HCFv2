<?php

/*
 *
 *  ____            _        _   __  __ _                  __  __ ____
 * |  _ \ ___   ___| | _____| |_|  \/  (_)_ __   ___      |  \/  |  _ \
 * | |_) / _ \ / __| |/ / _ \ __| |\/| | | '_ \ / _ \_____| |\/| | |_) |
 * |  __/ (_) | (__|   <  __/ |_| |  | | | | | |  __/_____| |  | |  __/
 * |_|   \___/ \___|_|\_\___|\__|_|  |_|_|_| |_|\___|     |_|  |_|_|
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * @author PocketMine Team
 * @link http://www.pocketmine.net/
 *
 *
*/

declare(strict_types=1);

namespace ImAMadDev\block;

use ImAMadDev\event\PlayerCreateEndPortalEvent;
use pocketmine\block\Block;
use pocketmine\block\BlockBreakInfo;
use pocketmine\block\BlockFactory;
use pocketmine\block\BlockIdentifier;
use pocketmine\block\BlockLegacyIds;
use pocketmine\block\BlockToolType;
use pocketmine\block\EndPortalFrame as EndPortalFramePMMP;
use pocketmine\block\VanillaBlocks;
use pocketmine\item\Item;
use pocketmine\item\ItemFactory;
use pocketmine\item\ItemIds;
use pocketmine\item\ToolTier;
use pocketmine\math\Facing;
use pocketmine\math\Vector3;
use pocketmine\player\Player;

class EndPortalFrame extends EndPortalFramePMMP
{

    public function __construct()
    {
        parent::__construct(new BlockIdentifier(BlockLegacyIds::END_PORTAL_FRAME, 0), "End Portal Frame", BlockBreakInfo::indestructible());
    }

    private const SIDES = [Facing::NORTH, Facing::EAST, Facing::SOUTH, Facing::WEST];

    public function onInteract(Item $item, int $face, Vector3 $clickVector, ?Player $player = null): bool
    {
        if(!$this->hasEye()){
            if($item->getId() === ItemIds::ENDER_EYE){
                ($ev = new PlayerCreateEndPortalEvent($player, $this))->call();
                if(!$ev->isCancelled()){
                    $item->pop();
                    $this->setEye(true);
                    $pos = $this->getPosition();
                    $pos->getWorld()->setBlockAt($pos->x, $pos->y, $pos->z, $this, false);
                    $this->tryCreatingPortal();
                    return true;
                }
            }
        }elseif($item->getId() !== ItemIds::ENDER_EYE){
            $this->setEye(false);
            $pos = $this->getPosition();
            $world = $pos->getWorld();
            $world->setBlockAt($pos->x, $pos->y, $pos->z, $this, false);
            $world->dropItem($pos->add(0.5, 0.75, 0.5), ItemFactory::getInstance()->get(ItemIds::ENDER_EYE));
            $this->tryDestroyingPortal();
            return true;
        }
        return true;
    }

    public function onNearbyBlockChange(): void
    {
        $this->tryDestroyingPortal();
        parent::onNearbyBlockChange(); // TODO: Change the autogenerated stub
    }

    public function onScheduledUpdate(): void
    {
        $this->tryDestroyingPortal();
        parent::onScheduledUpdate(); // TODO: Change the autogenerated stub
    }

    public function isCompletedPortal(Block $center) : bool{
        for($i = 0; $i < 4; ++$i){
            for($j = -1; $j <= 1; ++$j){
                $block = $center->getSide(self::SIDES[$i], 2)->getSide(self::SIDES[($i + 1) % 4], $j);
                if(!($block instanceof EndPortalFrame) || !$block->hasEye()){
                    return false;
                }
            }
        }

        return true;
    }

    public function tryCreatingPortal() : void{
        for($i = 0; $i < 4; ++$i){
            for($j = -1; $j <= 1; ++$j){
                $center = $this->getSide(self::SIDES[$i], 2)->getSide(self::SIDES[($i + 1) % 4], $j);
                if($this->isCompletedPortal($center)){
                    $this->createPortal($center);
                }
            }
        }
    }

    public function createPortal(Block $center) : void{
        $pos = $center->getPosition();
        $world = $pos->getWorld();
        $block_factory = BlockFactory::getInstance();
        for($i = -1; $i <= 1; ++$i){
            for($j = -1; $j <= 1; ++$j){
                $world->setBlockAt($pos->x + $i, $pos->y, $pos->z + $j, $block_factory->get(BlockLegacyIds::END_PORTAL, 0), false);
            }
        }
    }

    public function tryDestroyingPortal() : void{
        for($i = 0; $i < 4; ++$i){
            for($j = -1; $j <= 1; ++$j){
                $center = $this->getSide(self::SIDES[$i], 2)->getSide(self::SIDES[($i + 1) % 4], $j);
                if(!$this->isCompletedPortal($center)){
                    $this->destroyPortal($center);
                }
            }
        }
    }

    public function destroyPortal(Block $center) : void{
        $pos = $center->getPosition();
        $world = $pos->getWorld();
        for($i = -1; $i <= 1; ++$i){
            for($j = -1; $j <= 1; ++$j){
                if($world->getBlockAt($pos->x + $i, $pos->y, $pos->z + $j)->getId() === BlockLegacyIds::END_PORTAL){
                    $world->setBlockAt($pos->x + $i, $pos->y, $pos->z + $j, VanillaBlocks::AIR(), false);
                }
            }
        }
    }
}
